// Code generated by mockery v2.14.0. DO NOT EDIT.

package mock_adapter

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Postgres is an autogenerated mock type for the Postgres type
type Postgres struct {
	mock.Mock
}

// Config provides a mock function with given fields:
func (_m *Postgres) Config() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Connect provides a mock function with given fields: ctx, uri
func (_m *Postgres) Connect(ctx context.Context, uri string) (interface{}, error) {
	ret := _m.Called(ctx, uri)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, string) interface{}); ok {
		r0 = rf(ctx, uri)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uri)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPostgres interface {
	mock.TestingT
	Cleanup(func())
}

// NewPostgres creates a new instance of Postgres. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPostgres(t mockConstructorTestingTNewPostgres) *Postgres {
	mock := &Postgres{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
